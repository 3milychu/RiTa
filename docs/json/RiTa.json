{
  "class": "rita.RiTa",
  "fields": [{
    "name": "RiTa.VERSION",
    "example":"versionNumber = RiTa.VERSION; ",
    "variable": true,
    "description": "the current RiTa version ",
    "syntax": "RiTa.VERSION",
    "parameters": [],
    "returns": [{
        "type": "String",
        "desc": ""
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "RiTa.isAbbreviation",
    "example": "RiTa.isAbbreviation(\"Prof.\"); // returns -> true",
    "description": "Returns true if 'input' is an abbreviation",
    "syntax": "RiTa.isAbbreviation(input);<br/>RiTa.isAbbreviation(input, caseSensitive);",
    "parameters": [{
        "type": "String",
        "desc": "text input"
      }, {
        "type": "boolean",
        "desc": "caseSensitive (optional, default=false)"
      }

    ],
    "returns": [{
        "type": "boolean",
        "desc": "true if 'input' is an abbreviation"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.isQuestion",
    "example": "RiTa.isQuestion(\"what is this\"); // returns -> true",
    "description": "Returns true if sentence starts with a question word",
    "syntax": "RiTa.isQuestion(sentence);",
    "parameters": [{
        "type": "String",
        "desc": "sentence"
      }

    ],
    "returns": [{
        "type": "boolean",
        "desc": "true if 'sentence' starts with a question word"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.env",
    "example": "",
    "description": "Returns one of the following constants, depending on the runtime environment (RiTa.JAVA, RiTa.JS, RiTa.ANDROID, RiTa.NODE) ",
    "syntax": "RiTa.env();",
    "parameters": [],
    "returns": [{
        "type": "int",
        "desc": "Returns RiTa.JAVA, RiTa.JS, RiTa.ANDROID or RiTa.NODE, depending on the runtime environment"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "RiTa.isSentenceEnd",
    "example": "",
    "description": "Takes two consecutive words and returns true if 'currentWord' is the final word of a sentence (if true, 'nextWord' is generally the first word of the next sentence) ",
    "syntax": "RiTa.isSentenceEnd(currentWord, nextWord);",
    "parameters": [{
        "type": "String",
        "desc": "currentWord"
      }, {
        "type": "String",
        "desc": "nextWord"
      }

    ],
    "returns": [{
        "type": "boolean",
        "desc": "true if 'currentWord' is the final word of a sentence"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.isW_Question",
    "example": "RiTa.isW_Question(\"what is this\"); // returns -> true",
    "description": "Returns true if sentence starts with a w-question word, eg (who,what,why,where,when,etc.)",
    "syntax": "RiTa.isW_Question(sentence);",
    "parameters": [{
        "type": "String",
        "desc": "sentence"
      }

    ],
    "returns": [{
        "type": "boolean",
        "desc": "true if sentence starts with a w-question word, eg (who,what,why,where,when,etc.)"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.randomItem",
    "example": "String[] arr = {\"apple\",\"banana\",\"peach\"}; <br>RiTa.randomItem(arr);",
    "description": "Returns a random item from an array (or Collection)",
    "syntax": "RiTa.randomItem(myArray);",
    "parameters": [],
    "returns": [{
        "type": "Object",
        "desc": "the item"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "RiTa.randomOrdering",
    "example": "array = RiTa.randomOrdering(5);",
    "description": "Returns a randomly ordered array of unique integers from 0 to numElements. <br/>The size of the array will be numElements.",
    "syntax": "RiTa.randomOrdering(numElements);",
    "parameters": [{
        "type": "int",
        "desc": "numElements"
      }

    ],
    "returns": [{
        "type": "int[]",
        "desc": "unique integers from 0 to numElements-1"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.splitSentences",
    "example": "RiTa.splitSentences(\"\"The boy went fishing.\", he said. Then he went away.\");",
    "description": "Splits 'text' into sentences (according to PENN Treebank conventions)",
    "syntax": "RiTa.splitSentences(text);<br/>RiTa.splitSentences(text, regex);",
    "parameters": [{
      "type": "String",
      "desc": "text the text to be split"
    }, {
      "type": "String OR Regex (in JS)",
      "desc": "regex (optional) the pattern to be used for word tokenization"
    }],
    "returns": [{
        "type": "String[]",
        "desc": "array of sentences"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.stripPunctuation",
    "example": "RiTa.stripPunctuation(\"5$ is Cheap.\"); // returns -> 5 is Cheap",
    "description": "Strips all punctuation from the input string",
    "syntax": "RiTa.stripPunctuation(text);",
    "parameters": [{
      "type": "String",
      "desc": "text input"
    }],
    "returns": [{
        "type": "String",
        "desc": "result"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.trimPunctuation",
    "example": "RiTa.trimPunctuation(\"5$ is Cheap.\"); // returns -> 5$ is Cheap",
    "description": "Trims punctuation from both ends the input string (does not trim whitespace or internal punctuation)",
    "syntax": "RiTa.trimPunctuation(text);",
    "parameters": [{
      "type": "String",
      "desc": "text input"
    }],
    "returns": [{
      "type": "String",
      "desc": "result"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.isPunctuation",
    "example": "RiTa.isPunctuation(\"?\"); // returns -> true",
    "description": "Returns true if every character of 'text' is a punctuation character",
    "syntax": "RiTa.isPunctuation(text);",
    "parameters": [{
        "type": "String",
        "desc": "text input"
      }

    ],
    "returns": [{
      "type": "boolean",
      "desc": ""
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.tokenize",
    "example": "<br>sentence = \"The doctors treated dogs\";<br>wordArray = RiTa.tokenize(sentence);<br>wordArray = RiTa.tokenize(sentence, \"\\\\\\\\s\");<br>",
    "description": "Tokenizes a string (into words) according to Penn Treebank conventions<br/>See: <a href='http://www.cis.upenn.edu/~treebank/tokenization.html'>http://www.cis.upenn.edu/~treebank/tokenization.html</a>",
    "syntax": "RiTa.tokenize(text);<br/>RiTa.tokenize(text, regex);",
    "parameters": [{
      "type": "String",
      "desc": "the input"
    }, {
      "type": "String OR Regex <br>(in JS)",
      "desc": "regex (optional) the pattern to be used for tokenization"
    }],
    "returns": [{
        "type": "String[]",
        "desc": "in which each element is a single token (or word)"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  },{
    "name": "RiTa.untokenize",
    "example": "",
    "description": "Joins an array (of words and punctuation) into a String, according to Penn Treebank conventions<br/>See: <a href='http://www.cis.upenn.edu/~treebank/tokenization.html'>http://www.cis.upenn.edu/~treebank/tokenization.html</a>",
    "syntax": "RiTa.untokenize(wordArray)",
    "parameters": [{
      "type": "String[]",
      "desc": "the input"
    }],
    "returns": [{
        "type": "String",
        "desc": "in which the elements have been joined into a single string"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  },
  {
    "name": "RiTa.minEditDistance",
    "example": "RiTa.minEditDistance(\"Hello\", \"Hell\"); // -> 1<br><br> RiTa.minEditDistance(\"Hello\", \"Hell\", true); // -> 0.2",
    "description": "Takes a pair of strings or string-arrays and returns the minimum edit distance between them (the number of additions, subtractions, or modifications it takes to go from one to the other)",
    "syntax": "RiTa.minEditDistance(str1, str2);",
    "parameters": [{
      "type": "String",
      "desc": "str1"
    }, {
      "type": "String",
      "desc": "str2"
    }, {
      "type": "boolean",
      "desc": "normalize (optional) if true, normalizes the distance based on the length of the strings"
    }],
    "returns": [{
        "type": "int",
        "desc": "the minimum-edit distance"
      }
    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": "See <a href=\"https://en.wikipedia.org/wiki/Edit_distance\">https://en.wikipedia.org/wiki/Edit_distance</a>"
  },
  {
    "name": "RiTa.distance",
    "example": "RiTa.distance(0,3,4,0); // 5.0",
    "description": "Convenience method to get the distance between 2 points",
    "syntax": "RiTa.distance(x1, y1, x2, y2);",
    "parameters": [{
      "type": "float",
      "desc": "x1"
    }, {
      "type": "float",
      "desc": "y1"
    }, {
      "type": "float",
      "desc": "x2"
    }, {
      "type": "float",
      "desc": "y2"
    }],
    "returns": [{
        "type": "float",
        "desc": "the distance"
      }
    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "RiTa.getPhonemes",
    "example": "RiTa.getPhonemes(\"apple\"); // returns -> ae-p-ah-l <br> RiTa.getPhonemes(\"two apples\"); // returns -> t-uw ae-p-ah-l-z <br>",
    "description": "Returns a string containing all <a target=_new href='../../PhonemeTags.html'>phonemes</a> for the input text",
    "syntax": "RiTa.getPhonemes(wordStr);<br/>RiTa.getPhonemes(wordArr);",
    "parameters": [{
        "type": "String OR String[]",
        "desc": "words to analyze"
      }

    ],
    "returns": [{
      "type": "String",
      "desc": "e.g., 'ae-n  eh-l-ax-f-ax-n-t  ih-z  ey  m-ae-m-ax-l'<br>(for 'An elephant is a mammal')"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "RiTa.getPosTags",
    "example": "RiTa.getPosTags(\"I am a cat.\"); // [ \"prp\", \"vbp\", \"dt\", \"nn\", \".\" ]",
    "description": "Uses the default PosTagger to tag the input with tags from the <a href='../../PennTags.html'>PENN tag set</a> or the simplified WordNet tag set [a, r, v, n]",
    "syntax": "RiTa.getPosTags(word);<br/>RiTa.getPosTags(wordArr);<br/>RiTa.getPosTags(word, bool);<br/>RiTa.getPosTags(wordArr, bool);",
    "parameters": [{
        "type": "String OR String[]",
        "desc": "the text to be tagged"
      }, {
        "type": "boolean",
        "desc": "if true, use WordNet syle tags (optional, default=false)"
      }

    ],
    "returns": [{
        "type": "String[] of part-of-speech tags",
        "desc": ""
      }

    ],
    "related": "<a href='../../PennTags.html'>the PENN tagset</a>",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.getPosTagsInline",
    "example": "<br>sentence = \"The doctors treated dogs\";<br>posTags = RiTa.getPosTagsInline(sentence);<br><br>tokenArray = RiTa.tokenize(sentence);<br>posTags = RiTa.getPosTagsInline(tokenArray);<br><br>",
    "description": "Takes an string returns a combined string of the form:<p><pre>'The/dt doctor/nn treated/vbd dogs/nns'</pre>, using lowercased tags from the <a href='../../PennTags.html'>PENN tag set</a>",
    "syntax": "RiTa.getPosTagsInline(word);",
    "parameters": [{
        "type": "String or String[]",
        "desc": "the text to tag"
      }

    ],
    "returns": [{
        "type": "String",
        "desc": "a combined string of words and pos tags"
      }

    ],
    "related": "<a href='../../PennTags.html'>the PENN tagset</a>",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.getStresses",
    "example": "RiTa.getStresses(\"apple\"); returns -> 1/0",
    "description": "Analyzes the input and returns a new string containing the stresses for each syllable of the input text ",
    "syntax": "RiTa.getStresses(word);<br/>RiTa.getStresses(wordArr);",
    "parameters": [{
        "type": "String OR String[]",
        "desc": "words to analyze"
      }

    ],
    "returns": [{
        "type": "String",
        "desc": "e.g., '01-0-1', with 1's meaning 'stressed', and 0's meaning 'unstressed', "
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.getSyllables",
    "example": "RiTa.getSyllables(\"apple\"); // returns -> ae/p-ah-l",
    "description": "Analyzes the input and returns a String containing the phonemes for each syllable of each word of the input text,  delimited by dashes (phonemes) and spaces (words) ",
    "syntax": "RiTa.getSyllables(word);<br/>RiTa.getSyllables(wordArr);",
    "parameters": [{
        "type": "String OR String[]",
        "desc": "words to analyze"
      }

    ],
    "returns": [{
        "type": "String",
        "desc": "e.g., 'dh-ax d-ao-g r-ae-n f-ae-s-t' for the 4 syllables of the phrase 'The dog ran fast'"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.getWordCount",
    "example": "RiTa.getWordCount(\"one two three.\"); // returns 4",
    "description": "Returns the # of words in the String according to the default tokenizer",
    "syntax": "RiTa.getWordCount(text);",
    "parameters": [{
        "type": "String",
        "desc": "the string to analyze"
      }

    ],
    "returns": [{
        "type": "int",
        "desc": "the # of words"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  },
  {
    "name": "RiTa.concordance",
    "example": "// Java<br><br>Map args = new HashMap();<br>args.put(\"ignoreCase\", false);<br>args.put(\"ignoreStopWords\", true);<br><br>String c = RiTa.concordance(text, args);<br> <br> <br>// Javascript<br><br>var args = {<br>  ignoreCase: false,<br>  ignoreStopWords: true<br>};<br><br>var c = RiTa.concordance(text, args);<br> <br>",
    "description": "Creates a concordance, a list of words with their frequency of occurence, from the given text and (optional) options",
    "syntax": "RiTa.concordance(text, args);",
    "parameters": [{
        "type": "String",
        "desc": "the text"
      }, {
        "type": "String",
        "desc": "the word to lookup"
      }, {
        "type": "Object<br>(or Map in Java)",
        "desc": "options (optional) the relevant options for the KWIK model:<br><br>{int} options.wordCount: <br># of words of context on either side of input word<br><br> {boolean} options.ignoreCase:<br> Ignore upper/lower case in the model <br><br> {boolean} options.ignoreStopWords: <br>Ignore words like 'the', 'and', 'a', 'of', etc, as specified in RiTa.STOP_WORDS<br><br> {boolean} options.ignorePunctuation:<br> Ignore punctuation tokens in the model<br><br> {String[]} options.wordsToIgnore:<br> A set of words (alternative stop-words, for example) to ignore.<br><br>"
      }
    ],
    "returns": [{
        "type": "Object<br>(or Map in Java)",
        "desc": "the concordance"
      }
    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": "See <a href=\"https://en.wikipedia.org/wiki/Concordance_%28publishing%29\">https://en.wikipedia.org/wiki/Concordance_%28publishing%29</a>"
  },
  {
    "name": "RiTa.kwic",
    "example": "// Java<br><br>Map args = new HashMap();<br>args.put(\"ignoreCase\", false);<br>args.put(\"ignoreStopWords\", true);<br><br>String[] lines = RiTa.kwic(text, args);<br> <br> <br>// Javascript<br><br>var args = {<br>  ignoreCase: false,<br>  ignoreStopWords: true<br>};<br><br>var lines = RiTa.kwic(text, args);<br> <br>",
    "description": "Creates a Key-Word-In-Context (KWIC) model from a given text, a word to lookup, a wordCount and (optional) options",
    "syntax": "RiTa.kwic(text, word, options);",
    "parameters": [{
        "type": "String",
        "desc": "the text"
      }, {
        "type": "String",
        "desc": "the word to lookup"
      }, {
        "type": "Object<br>(or Map in Java)",
        "desc": "options (optional) the relevant options for the KWIC model:<br><br>{int} options.wordCount: <br># of words/punctuation of context on either side of input word<br><br> {boolean} options.ignoreCase:<br> Ignore upper/lower case in the model <br><br> {boolean} options.ignoreStopWords: <br>Ignore words like 'the', 'and', 'a', 'of', etc, as specified in RiTa.STOP_WORDS<br><br> {boolean} options.ignorePunctuation:<br> Ignore punctuation tokens in the model<br><br> {String[]} options.wordsToIgnore:<br> A set of words (alternative stop-words, for example) to ignore.<br><br>"
      }
    ],
    "returns": [{
        "type": "String[]",
        "desc": "all the occurrences of the keyword in the model, each with 'wordCount' words of context on either side"
      }
    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": "See <a href=\"https://en.wikipedia.org/wiki/Concordance_%28publishing%29\">https://en.wikipedia.org/wiki/Concordance_%28publishing%29</a>"
  },
  {
    "name": "RiTa.conjugate",
    "example": "// Java<br><br>Map args = new HashMap();<br>args.put(\"tense\", RiTa.PAST_TENSE);<br>args.put(\"number\", RiTa.SINGULAR);<br>args.put(\"person\", RiTa.FIRST_PERSON);<br><br>String c = RiTa.conjugate(\"swim\", args);<br> <br> <br>// Javascript<br><br>var args = {<br>  tense: RiTa.PRESENT_TENSE,<br>  number: RiTa.SINGULAR,<br>  person: RiTa.THIRD_PERSON<br>};<br><br>var c = RiTa.conjugate('swim', args);<br> <br>",
    "description": "Conjugates the 'verb' according to the specified options",
    "syntax": "RiTa.conjugate(verb, args);",
    "parameters": [{
        "type": "String",
        "desc": "the verb stem"
      }, {
        "type": "Object<br>(or Map in Java)",
        "desc": "args containing the relevant options for the conjugator"
      }

    ],
    "returns": [{
        "type": "String",
        "desc": "the conjugated verb"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.getPastParticiple",
    "example": "RiTa.getPastParticiple(\"write\"); // returns -> written",
    "description": "Returns the past participle form of the stemmed or non-stemmed 'verb'",
    "syntax": "RiTa.getPastParticiple(verb);",
    "parameters": [{
        "type": "String",
        "desc": "the verb"
      }

    ],
    "returns": [{
        "type": "String",
        "desc": "the past participle form of the verb"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.getPresentParticiple",
    "example": "RiTa.getPresentParticiple(\"sit\"); // returns -> sitting",
    "description": "Returns the present participle form of the stemmed or non-stemmed 'verb'",
    "syntax": "RiTa.getPresentParticiple(verb);",
    "parameters": [{
        "type": "String",
        "desc": "the verb"
      }

    ],
    "returns": [{
        "type": "String",
        "desc": "the present participle form of the verb"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""

  }, {
    "name": "RiTa.stem",
    "example": "String s = RiTa.stem('cakes');\n\nString y = RiTa.stem('cakes', RiTa.PORTER);",
    "description": "Extracts base roots from a word according to the specified stemming algorithm <br/>&nbsp;<br/> Note: see <a href='http://text-processing.com/demo/stem/'>http://text-processing.com/demo/stem/</a> for comparison of Lancaster and Porter algorithms or <a href='http://mpii.de/yago-naga/javatools'>http://mpii.de/yago-naga/javatools</a> for info on PlingStemmer",
    "syntax": "RiTa.stem(word, type);",
    "parameters": [{
        "type": "String",
        "desc": "the word to analyze"
      }, {
        "type": "String",
        "desc": "Choose RiTa.PORTER (the default), RiTa.LANCASTER, or RiTa.PLING, to specify the stemming algorithm to use"
      }

    ],
    "returns": [{
        "type": "String",
        "desc": "the stemmed form of 'word'"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "RiTa.pluralize",
    "example": "<br>pluralized = RiTa.pluralize(\"dog\"); // returns \"dogs\"<br><br>pluralized = RiTa.pluralize(\"mouse\"); // returns \"mice\"<br><br>",
    "description": "Pluralizes a noun according to pluralization rules",
    "syntax": "RiTa.pluralize(word);",
    "parameters": [{
      "type": "String",
      "desc": "the noun"
    }],
    "returns": [{
      "type": "String",
      "desc": "the regular or irregular plural form of the noun"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "RiTa.singularize",
    "example": "<br>singular = RiTa.singularize(\"dogs\"); // returns \"dog\"<br><br>singular = RiTa.singularize(\"mice\"); // returns \"mouse\"<br><br>",
    "description": "Singularize a word according to singularization rules",
    "syntax": "RiTa.singularize(word);",
    "parameters": [{
      "type": "String",
      "desc": "the noun"
    }],
    "returns": [{
      "type": "String",
      "desc": "the singular form of the noun"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "hidden": "true",
    "name": "RiTa.timer",
    "example": "",
    "description": "Starts a timer that calls 'onRiTaEvent()', or the specified callback (in JS), every 'period' seconds",
    "syntax": "RiTa.timer(parent, period);<br/>RiTa.timer(parent, period, callback);",
    "parameters": [{
        "type": "Object",
        "desc": "the parent object in which to find (optional in JS)"
      }, {
        "type": "float",
        "desc": "period (in seconds)"
      }, {
        "type": "String OR Function ",
        "desc": "callback function to be called every 'period' seconds<br>the function name String (in Java) or the function itself (in JS) "
      }

    ],
    "returns": [{
        "type": "int",
        "desc": "the unique id for the timer"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": "The 'parent' object is optional in JS, and the optional callback is a function, rather than a String name"

  }, {
    "hidden": "true",
    "name": "RiTa.stopTimer",
    "example": "",
    "description": "Stops a timer according to its unique id",
    "syntax": "RiTa.stopTimer(id);",
    "parameters": [{
        "type": "int",
        "desc": "the unique id for the timer"
      }

    ],
    "returns": [],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "hidden": "true",
    "name": "RiTa.pauseTimer",
    "example": "",
    "description": "Pauses a timer according to its unique id (and assigns a new unique id)",
    "syntax": "RiTa.pauseTimer(id, pauseSec);",
    "parameters": [{
        "type": "int",
        "desc": "the unique id for the timer"
      }, {
        "type": "float",
        "desc": "pause-time (in seconds)"
      }

    ],
    "returns": [{
        "type": "id",
        "desc": "the new unique id for the timer"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "RiTa.random",
    "example": "RiTa.random(0,1.0)// to get a float between 0, 1 <br>RiTa.random(10) // to get an int between 0,10",
    "description": "Returns a random number between >= min (default=0) and < max (default=1)",
    "syntax": "RiTa.random()<br>RiTa.random(max)<br>RiTa.random(min, max);",
    "parameters": [{
      "type": "int or float",
      "desc": "min-value, (optional, default=0) "
    }, {
      "type": "int or float",
      "desc": "max-value, (optional, default=1) "
    }],
    "returns": [{
        "type": "int or float ",
        "desc": "the random number (its type depends on input parameters)"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": "if only one parameter is supplied, it is read as the max-value (with min=0)"

  }, {
    "name": "RiTa.loadString",
    "example": "txt = RiTa.loadString(\"kafka.txt\");",
    "description": "Loads the contents of a file or URL and then calls back to the supplied 'callback' function with the loaded string as an argument.",
    "syntax": "RiTa.loadString(url);<br/>RiTa.loadString(url, callback);<br/>RiTa.loadString(url, pApplet);",
    "parameters": [{
      "type": "String",
      "desc": "the filename from which to load the file"
    }, {
      "type": "Function (optional: the callback, for JavaScript only)<br> or Object (optional: the PApplet, for Java only)<br>",
      "desc": "If a function (in JavaScript), it will be called after the file is loaded (with the loaded string as its argument).<br><br>If no callback is supplied, or the argument is a PApplet(in Java), onRiTaEvent(re) will be called instead, with re.type() == RiTa.DATA_LOADED"
    }, {
      "type": "String (optional)",
      "desc": "the characters with which to join the lines of the string (default = '\\\\n') -- in some cases, a space character may be more useful..."
    }],
    "returns": [],
    "related": "",
    "platform": "Java / Javascript",
    "note": "In Node, uses the node 'filesystem' or 'request' modules; in JavaScript, uses an XMLHttpRequest; in Java, if a Processing PApplet is passed as a 2nd argument, it will be used to locate and check the 'data' folder of the sketch for the specified file"
  }, {
    "hidden": true,
    "name": "RiTa.isStopWord",
    "example": "",
    "description": "",
    "syntax": "RiTa.isStopWord(word);",
    "parameters": [{
      "type": "String",
      "desc": ""
    }],
    "returns": [{
      "type": "boolean",
      "desc": ""
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }]
}
